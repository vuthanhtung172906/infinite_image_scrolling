{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","photos","setPhoto","pageNumber","setPageNumber","loading","setLoading","pageEnd","useRef","num","fetchPhotos","a","fetch","res","json","data","p","loadMore","prevPageNumber","useEffect","observer","IntersectionObserver","entry","isIntersecting","unobserve","current","threshold","observe","className","map","photo","index","src","urls","small","alt","user","first_name","last_name","total_likes","length","onClick","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAyDeA,EAvDH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTC,EADS,KACAC,EADA,OAEqBF,mBAAS,GAF9B,mBAETG,EAFS,KAEIC,EAFJ,OAGeJ,oBAAS,GAHxB,mBAGTK,EAHS,KAGCC,EAHD,KAIVC,EAAUC,mBACZC,EAAM,EACJC,EAAW,uCAAG,WAAMP,GAAN,iBAAAQ,EAAA,4DACC,8CADD,SAEAC,MAAM,8CAAD,OADJ,8CACI,iBAAkET,EAAlE,iBAFL,cAEZU,EAFY,gBAGCA,EAAIC,OAHL,OAGZC,EAHY,OAIlBb,GAAS,SAAAc,GAAC,4BAAQA,GAAR,YAAcD,OACxBT,GAAW,GALO,2CAAH,sDAOXW,EAAW,WACfb,GAAc,SAAAc,GAAc,OAAIA,EAAiB,MAoBnD,OAjBAC,qBAAU,WACRT,EAAYP,KACZ,CAACA,IACHgB,qBAAU,WACR,GAAGd,EAAQ,CACT,IAAMe,EAAW,IAAIC,sBAAqB,SAAAC,GACrCA,EAAM,GAAGC,iBACVd,IACAQ,IACGR,GAAK,GACNW,EAASI,UAAUjB,EAAQkB,YAG/B,CAACC,UAAU,IACbN,EAASO,QAAQpB,EAAQkB,YAE3B,CAACpB,EAASI,IAEV,sBAAKmB,UAAU,MAAf,UACI,+DAEE3B,EAAO4B,KAAI,SAACC,EAAMC,GAAP,OACT,sBAAKH,UAAU,SAAf,UACE,qBAAKI,IAAKF,EAAMG,KAAKC,MAAOC,IAAI,KAChC,4BAAIL,EAAMM,KAAKC,WAAa,IAAMP,EAAMM,KAAKE,YAC7C,0CAAaR,EAAMM,KAAKG,iBAHGR,MAOjC,qBAAKH,UAAU,UAAf,SACE,qBAAKI,IAAI,cAAcG,IAAI,OAE7B,6BAAKlC,EAAOuC,SACZ,wBAAQC,QAASxB,EAAUyB,IAAKnC,EAAhC,2BCxCOoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c00c2ea0.chunk.js","sourcesContent":["import React,{useState,useEffect,useRef} from 'react';\n\nconst App = () => {\n  const [photos , setPhoto] = useState([]);\n  const [pageNumber , setPageNumber] = useState(1);\n  const [loading , setLoading] = useState(false);\n  const pageEnd = useRef();\n  let num = 1;\n  const fetchPhotos = async(pageNumber) =>{\n    const Access_key = \"ZsOVhZU7b-5m7R15pJ9O8jW9PNZ1vJFySLFbgmXFhyQ\";\n    const res = await fetch(`https://api.unsplash.com/photos/?client_id=${Access_key}&page=${pageNumber}&per_page=10`);\n    const data = await res.json();\n    setPhoto(p => [...p, ...data]);\n    setLoading(true);\n  }\n  const loadMore = () =>{\n    setPageNumber(prevPageNumber => prevPageNumber + 1)\n  }\n  \n  useEffect(()=>{\n    fetchPhotos(pageNumber)\n  },[pageNumber])\n  useEffect(()=>{\n    if(loading){\n      const observer = new IntersectionObserver(entry=>{\n        if(entry[0].isIntersecting){\n          num++;\n          loadMore();\n          if(num>=5){\n            observer.unobserve(pageEnd.current)\n          }\n        }\n      },{threshold:1});\n      observer.observe(pageEnd.current);\n    }\n  },[loading, num])\n  return (\n    <div className=\"App\">\n        <h1>Infinite scrolling react hook</h1>\n        {\n          photos.map((photo,index)=>(\n            <div className=\"photos\" key={index}>\n              <img src={photo.urls.small} alt=\"\"/>\n              <p>{photo.user.first_name + ' ' + photo.user.last_name}</p>\n              <span>Like: {photo.user.total_likes}</span>\n            </div>\n          ))\n        }\n        <div className=\"loading\">\n          <img src=\"loading.gif\" alt=\"\"/>\n        </div>\n        <h3>{photos.length}</h3>\n        <button onClick={loadMore} ref={pageEnd}>Load More</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}